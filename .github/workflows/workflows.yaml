name: Build and Release Halo Plugin

on:
  push:
    branches:
      - main
    paths:
      - "**"
      - "!**.md"
  release:
    types:
      - created
  pull_request:
    branches:
      - main
    paths:
      - "**"
      - "!**.md"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          cache: "gradle"
          java-version: "17"
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> "$GITHUB_OUTPUT"
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/widget/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install pnpm globally
        run: npm install -g pnpm
      - name: Install Frontend Dependencies
        run: |
          ./gradlew pnpmInstall
          pnpm add @formkit/vue pinyin@3
      - name: Build with Gradle
        run: |
          # Set the version with tag name when releasing
          version=${{ github.event.release.tag_name }}
          version=${version#v}
          sed -i "s/version=.*-SNAPSHOT$/version=$version/1" gradle.properties
          ./gradlew clean build -x test
      - name: Archive plugin-APIConfigStore jar
        uses: actions/upload-artifact@v4
        with:
          name: plugin-APIConfigStore
          path: |
            build/libs/*.jar
          retention-days: 1

  github-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Download plugin-APIConfigStore jar
        uses: actions/download-artifact@v4
        with:
          name: plugin-APIConfigStore
          path: build/libs
      - name: Get Name of Artifact
        id: get_artifact
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          echo "Repository name: ${REPO_NAME}"
          ARTIFACT_PATHNAME=$(ls build/libs/${REPO_NAME}*.jar | head -n 1)
          ARTIFACT_NAME=$(basename ${ARTIFACT_PATHNAME})
          echo "Artifact pathname: ${ARTIFACT_PATHNAME}"
          echo "Artifact name: ${ARTIFACT_NAME}"
          echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> "$GITHUB_ENV"
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_ENV"
          echo "RELEASE_ID=${{ github.event.release.id }}" >> "$GITHUB_ENV"
          echo "artifact_pathname=${ARTIFACT_PATHNAME}" >> "$GITHUB_OUTPUT"
          echo "artifact_name=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
          echo "release_id=${{ github.event.release.id }}" >> "$GITHUB_OUTPUT"
      - name: Upload a Release Asset
        uses: actions/github-script@v6
        if: github.event_name == 'release'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // 2. 使用严谨的 console.log 和注释，帮助调试
            console.log('GitHub Script environment:', process.versions);
            
            const fs = require('fs').promises; // 使用 promises 版本的 fs 模块
            
            const { owner, repo } = context.repo; // 3. 更简洁的获取 owner 和 repo 的方式
            
            console.log('Repository:', { owner, repo });
            
            // 4. 使用更明确的变量名，并从 GITHUB_ENV 获取变量
            const releaseId = process.env.RELEASE_ID;
            const artifactPathName = process.env.ARTIFACT_PATHNAME;
            const artifactName = process.env.ARTIFACT_NAME;
            
            console.log('Release ID:', releaseId);
            console.log('Artifact Path:', artifactPathName);
            console.log('Artifact Name:', artifactName);
            
            // 5. 检查文件是否存在 (可选，根据你的需要添加)
            try {
              await fs.access(artifactPathName);
              console.log('Artifact file exists.');
            } catch (error) {
              console.error('Artifact file does not exist:', error);
              return 1; // 退出脚本并标记为失败
            }
            
            // 6. 使用 github.rest.repos.uploadReleaseAsset 上传文件
            try {
              const uploadResponse = await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: releaseId,
                name: artifactName,
                data: await fs.readFile(artifactPathName)
              });
              console.log('Successfully uploaded release asset:', uploadResponse.data.browser_download_url);
            } catch (error) {
              console.error('Error uploading release asset:', error);
              core.setFailed(error.message); // 7. 使用 core.setFailed 标记错误
            }
