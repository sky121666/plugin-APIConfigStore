name: Build and Release Halo Plugin

on:
  push:
    branches:
      - main # 当 main 分支有代码推送时触发
    paths:
      - "**" # 监测所有文件
      - "!**.md" # 但忽略 Markdown 文件
  release:
    types:
      - created # 当创建新的 Release 时触发
  pull_request:
    branches:
      - main # 当有 main 分支的 PR 时触发
    paths:
      - "**"
      - "!**.md"

jobs:
  build:
    runs-on: ubuntu-latest # 使用 Ubuntu 最新版作为构建环境
    steps:
      - uses: actions/checkout@v4 # 检出代码，版本指定为 v4
        with:
          submodules: true # 包含子模块
      - name: Set up JDK 17
        uses: actions/setup-java@v4 # 设置 JDK 17，版本指定为 v4
        with:
          distribution: "temurin"
          cache: "gradle"
          java-version: "17"
      - name: Set up Node.js
        uses: actions/setup-node@v4 # 设置 Node.js 环境，版本指定为 v4
        with:
          node-version: "20"
          cache: "pnpm"
      - uses: pnpm/action-setup@v3 # 安装 pnpm，版本指定为 v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: latest # 使用最新版本的 pnpm
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v4 # 设置 pnpm 缓存，版本指定为 v4
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            **/node_modules
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Frontend Dependencies
        run: |
          ./gradlew :widget:pnpmInstall # 安装项目的前端依赖
          cd widget # 进入前端项目目录，你的前端项目可能需要修改这个目录名
          pnpm add @formkit/vue pinyin@3 # 安装额外的依赖 @formkit/vue 和 pinyin@3
          cd ..
          ./gradlew :widget:build # 构建前端项目
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3 # 设置 Gradle，版本指定为 v3
      - name: Build with Gradle
        run: |
          # 根据 GitHub 引用名称(GITHUB_REF_NAME)设置版本号
          if [[ "$GITHUB_REF_NAME" == v* ]]; then
            version="${GITHUB_REF_NAME#v}" # 如果是 release 版本，则提取版本号，例如从 v1.2.3 中提取 1.2.3
          else:
            version="snapshot-$GITHUB_SHA" # 否则，使用 snapshot 版本号加上当前提交的 SHA 哈希值
          fi
          sed -i "s/version=.*-SNAPSHOT$/version=$version/1" gradle.properties # 更新 gradle.properties 文件中的版本号
          ./gradlew clean build # 执行构建命令
      - name: Archive plugin-starter jar
        uses: actions/upload-artifact@v4 # 上传构建产物，版本指定为 v4
        with:
          name: plugin-starter # 将构建产物命名为 plugin-starter
          path: |
            build/libs/*.jar # 上传 build/libs/ 目录下所有的 jar 包
          retention-days: 1 # 设置构建产物的保留时间为 1 天

  github-release:
    runs-on: ubuntu-latest
    needs: build # 依赖于 build 任务的完成
    if: github.event_name == 'release' # 仅在创建 Release 事件时执行
    steps:
      - name: Download plugin-starter jar
        uses: actions/download-artifact@v4 # 下载构建产物，版本指定为 v4
        with:
          name: plugin-starter
          path: build/libs
      - name: Upload a Release Asset
        uses: actions/github-script@v7 # 使用 GitHub 脚本上传 Release 资产，版本指定为 v7
        if: github.event_name == 'release'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const releaseId = context.payload.release.id;
            const artifactPathName = 'build/libs/';

            const files = await fs.readdir(artifactPathName);
            for (const file of files) {
              if (file.endsWith('.jar')) {
                console.log('Releasing', releaseId, artifactPathName, file);
                await github.rest.repos.uploadReleaseAsset({
                  owner,
                  repo,
                  release_id: releaseId,
                  name: file,
                  data: await fs.readFile(artifactPathName + file)
                });
              }
            }
